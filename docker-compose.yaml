version: "2.4"
services:
  ref-logistics-protocol-webserver:
    build:
      context: ref-logistics-app-protocol/webserver
      dockerfile: dockerfile
    container_name: ref-logistics-protocol-webserver
    depends_on:
      - rabbitmq
      - postgres
    restart: always
    environment:
      ENV: prod
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      BPP_PRIVATE_KEY: ${BPP_PRIVATE_KEY}
      BPP_PUBLIC_KEY: ${BPP_PUBLIC_KEY}
      BPP_UNIQUE_KEY_ID: ${BPP_UNIQUE_KEY_ID}
      BPP_ID: ${BPP_ID}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      FLASK_SERVER: "True"
      DOCKER_DEFAULT_PLATFORM: ${DOCKER_DEFAULT_PLATFORM}
    expose:
      - 5556
    ports:
      - 5556:5556
  ref-logistics-protocol-consumer:
    build:
      context: ref-logistics-app-protocol/webserver
      dockerfile: consumer_dockerfile
    container_name: ref-logistics-protocol-consumer
    depends_on:
      - rabbitmq
      - postgres
    environment:
      ENV: prod
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      BPP_PRIVATE_KEY: ${BPP_PRIVATE_KEY}
      BPP_PUBLIC_KEY: ${BPP_PUBLIC_KEY}
      BPP_UNIQUE_KEY_ID: ${BPP_UNIQUE_KEY_ID}
      BPP_ID: ${BPP_ID}
      BPP_CLIENT_ENDPOINT: ${BPP_CLIENT_ENDPOINT}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      BG_DEFAULT_URL: ${BG_DEFAULT_URL}
      FLASK_SERVER: "False"
  rabbitmq:
    image: rabbitmq:3.8.25-management-alpine
    hostname: rabbitmq
    ports:
      - 5673:5673
      - 15673:15673
    volumes:
      - ./rabbitmq/data/:/var/lib/rabbitmq/
      - ./rabbitmq/log/:/var/log/rabbitmq/
    expose:
      - 5673
      - 15673
  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    volumes:
      - "./data:/data/db"
  logistics:
    build:
      context: ref-logistics-app
      dockerfile: logisticDocker
    restart: always
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_AUTH_USERNAME: ${SMTP_AUTH_USERNAME}
      SMTP_AUTH_PASSWORD: ${SMTP_AUTH_PASSWORD}
      SMTP_EMAIL_SENDER: ${SMTP_EMAIL_SENDER}
      SMTP_EXCEPTION_EMAIL_RECIPIENTS: ${SMTP_EXCEPTION_EMAIL_RECIPIENTS}
      SMTP_EMAIL_TEMPLATE_HEADER_IMAGE_PATH: ""
      MONGODB_DATABASE_HOST: ${MONGODB_DATABASE_HOST}
      MONGODB_DATABASE_PORT: ${MONGODB_DATABASE_PORT}
      MONGODB_DATABASE_USERNAME: ${MONGODB_DATABASE_USERNAME}
      MONGODB_DATABASE_PASSWORD: ${MONGODB_DATABASE_PASSWORD}
      MONGODB_DATABASE_NAME: ${MONGODB_DATABASE_NAME}
      AUTH_ACCESS_JWT_SECRET: ${AUTH_ACCESS_JWT_SECRET}
      BASE_APP_PORT: ${LOGISTIC_SERVICE_PORT}
      S3_VERSION: ${S3_VERSION}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      DESCRIPTOR_NAME: ${DESCRIPTOR_NAME}
      LONG_DESCRIPTION: ${LONG_DESCRIPTION}
      SHORT_DESCRIPTION : ${SHORT_DESCRIPTION}
      LOGISTICS_ADMIN_NAME: ${LOGISTICS_ADMIN_NAME}
      LOGISTICS_ADMIN_FIRST_NAME: ${LOGISTICS_ADMIN_FIRST_NAME}
      LOGISTICS_ADMIN_SECOND_USER_FIRST_NAME: {LOGISTICS_ADMIN_SECOND_USER_FIRST_NAME}
      LOGISTICS_ADMIN_PASSWORD: {LOGISTICS_ADMIN_PASSWORD}
      INTRA_SERVICE_NOTIFICATION_SERVICE_URL: ${INTRA_SERVICE_NOTIFICAION_SERVICE_URL}
      MAIN_SITE_URL: ${MAIN_SITE_URL}
      MMI_CLIENT_SECRET: ${MMI_CLIENT_SECRET}
      MMI_CLIENT_ID: ${MMI_CLIENT_ID}
      MMI_ADVANCE_API_KEY: ${MMI_ADVANCE_API_KEY}
      LOKI_HOST: ${LOKI_HOST}
      NODE_ENV: ${NODE_ENV}
      REACT_APP_ALLOWED_DOMAINS: ${REACT_APP_ALLOWED_DOMAINS}
      LOGISTICS_ADMIN_EMAIL: ${LOGISTICS_ADMIN_EMAIL}
      BPP_URI: ${BPP_URI}
      PROTOCOL_BASE_URL: ${PROTOCOL_BASE_URL}
      REACT_APP_MASTER_EMAIL: ${REACT_APP_MASTER_EMAIL}
    volumes:
      - ./app:/srv/app
    ports:
      - "3020:3020"
    depends_on:
      - mongo
    expose:
      - 3020
  logistics-api-client:
    build:
      context: ref-logistics-app
      dockerfile: logisticApiDocker
    restart: always
    environment:
      BPP_URI: ${BPP_URI}
      LOGISTICS_SERVER_URL: ${LOGISTICS_SERVER_URL}
      PROTOCOL_BASE_URL: ${PROTOCOL_BASE_URL}
      LONG_DESCRIPTION_NAME: ${LONG_DESCRIPTION_NAME}
      SHORT_DESCRIPTION_NAME: ${SHORT_DESCRIPTION_NAME}
      DESCRIPTOR_NAME: ${DESCRIPTOR_NAME}
      PORT: 3002
      LOKI_HOST: ${LOKI_HOST}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./app:/srv/app
    ports:
      - "3002:3002"
    expose:
      - 3002
  notification:
    build:
      context: ref-logistics-app
      dockerfile: notificationDocker
    restart: always
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_AUTH_USERNAME: ${SMTP_AUTH_USERNAME}
      SMTP_AUTH_PASSWORD: ${SMTP_AUTH_PASSWORD}
      SMTP_EMAIL_SENDER: ${SMTP_EMAIL_SENDER}
      SMTP_EXCEPTION_EMAIL_RECIPIENTS: ${SMTP_EXCEPTION_EMAIL_RECIPIENTS}
      SMTP_EMAIL_TEMPLATE_HEADER_IMAGE_PATH: ""
      BASE_APP_NAMESPACE: "notification"
      BASE_APP_PORT: 3021
      INTRA_SERVICE_NOTIFICAION_SERVICE_URL: ${INTRA_SERVICE_NOTIFICAION_SERVICE_URL}
      AUTH_ACCESS_JWT_SECRET: ${AUTH_ACCESS_JWT_SECRET}
      INTRA_SERVICE_SELLER_CLIENT_SERVICE_URL: ${INTRA_SERVICE_SELLER_CLIENT_SERVICE_URL}
      APP_URL: ${APP_URL}
    volumes:
      - ./app:/srv/app
    ports:
      - "3021:3021"
    depends_on:
      - mongo
    expose:
      - 3021
  postgres:
    image: postgres
    environment:
      POSTGRES_DB: ${CLIENT_PG_DATABASE}
      POSTGRES_USER: ${CLIENT_PG_USER}
      POSTGRES_PASSWORD: ${CLIENT_PG_PASSWORD}
    volumes:
      - ./postgres_init_scripts/:/docker-entrypoint-initdb.d/
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    expose:
      - 5432
  nginx:
    build:
      context: ref-logistics-app-frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
        REACT_APP_ALLOWED_DOMAINS: ${REACT_APP_ALLOWED_DOMAINS}
        REACT_APP_MASTER_EMAIL: ${REACT_APP_MASTER_EMAIL}
    restart: "always"
    environment:
      REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
      REACT_APP_ALLOWED_DOMAINS: ${REACT_APP_ALLOWED_DOMAINS}
      REACT_APP_MASTER_EMAIL: ${REACT_APP_MASTER_EMAIL}
    depends_on:
      - logistics
      - ref-logistics-protocol-webserver
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
  certbot:
    image: certbot/certbot
    restart: "always"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c ‘trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;’"
